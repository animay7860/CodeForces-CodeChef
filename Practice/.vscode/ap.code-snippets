{
	"": {
		"prefix": "ap",
		"body": [
		  "/*",
		  "######################################################################################",
		  "#                                                                                    #",
		  "#                            ,.--------._                                            #",
		  "#                           /            ''.                                         #",
		  "#                         ,'                \\     |\"\\                /\\          /\\  #",
		  "#                /\"|     /                   \\    |__\"              ( \\\\        // ) #",
		  "#               \"_\"|    /           z#####z   \\  //                  \\ \\\\      // /  #",
		  "#                 \\\\  #####        ##------\".  \\//                    \\_\\\\||||//_/   #",
		  "#                  \\\\/-----\\     /          \".  \\                      \\/ _  _ \\     #",
		  "#                   \\|      \\   |   ,,--..       \\                    \\/|(O)(O)|     #",
		  "#                   | ,.--._ \\  (  | ##   \\)      \\                  \\/ |      |     #",
		  "#                   |(  ##  )/   \\ `-....-//       |///////////////_\\/  \\      /     #",
		  "#                     '--'.\"      \\                \\              //     |____|      #",
		  "#                  /'    /         ) --.            \\            ||     /      \\     #",
		  "#               ,..|     \\.________/    `-..         \\   \\       \\|     \\ 0  0 /     #",
		  "#            _,##/ |   ,/   /   \\           \\         \\   \\       U    / \\_//_/      #",
		  "#          :###.-  |  ,/   /     \\        /' \"\"\\      .\\        (     /              #",
		  "#         /####|   |   (.___________,---',/    |       |\\=._____|  |_/               #",
		  "#        /#####|   |     \\__|__|__|__|_,/             |####\\    |  ||                #",
		  "#       /######\\   \\      \\__________/                /#####|   \\  ||                #",
		  "#      /|#######`. `\\                                /#######\\   | ||                #",
		  "#     /++\\#########\\  \\                      _,'    _/#########\\ | ||                #",
		  "#    /++++|#########|  \\      .---..       ,/      ,'##########.\\|_||                #",
		  "#   //++++|#########\\.  \\.              ,-/      ,'########,+++++\\\\_\\\\               #",
		  "#  /++++++|##########\\.   '._        _,/       ,'######,''++++++++\\                  #",
		  "# |+++++++|###########|       -----.\"        _'#######' +++++++++++\\                 #",
		  "# |+++++++|############\\.     \\\\     //      /#######/++++ S@yaN +++\\                #",
		  "#      ________________________\\\\___//______________________________________         #",
		  "#     / ____________________________________________________________________)        #",
		  "#    / /              _                                             _                #",
		  "#    | |             | |                                           | |               #",
		  "#     \\ \\            | | _           ____           ____           | |  _            #",
		  "#      \\ \\           | || \\         / ___)         / _  )          | | / )           #",
		  "#  _____) )          | | | |        | |           (  __ /          | |< (            #",
		  "# (______/           |_| |_|        |_|            \\_____)         |_| \\_)           #",
		  "#                                                                                    #",
		  "######################################################################################",
		  "",
		  "                           .e@$$$$$$$eeeu=~=._",
		  "                        zd$$$$$$$$$$$$$$'   z$b..  _,x,",
		  "                     z????$$$$$$$$P\",-==   matrix\"\"`$$$.  .;",
		  "                  .e\"..     `\"?$Fu^'e$$$$$be.   )$$' 4r'$$nn,     _. -",
		  "                ud$$$P  zeeeu.   ld$$$$$$$$$$$$c`=._,$$  <\"$$$$= '",
		  "              z$$$$$$e ?$$\"   \"FE=e2R$$$$$$$$$$$$bu\"h._..d. \"`nMb`    _",
		  "           .-J$$$$$$$$,?$$b,.,J\",xc3$$$$$$$$$$$$$$$\" Mh. \"  'MMMMP- ~",
		  "      ..ze$F R$$$$$$$$$bcccd$$\"J(T-",
		  "\"b\".nMMP'b.   \"\",c$$$$$$$$P.MMMMMMMb.<       )!! >'dMMMMMMM  __",
		  " .HMMMM  \"??$$$$$PF\"uPF\",, umnmnHMMMMMbx.... ''.n'MMMMMCund~    `~ ~ -",
		  "'M'HMMMh         .e$ee$$?7 MMMMMT\"\",MMMMMMMMMMMMM.MMMMMMMMM",
		  "  MMMMMMMx -...e$$$P??,nMM \"`,nndMMMMMMMMMMMMMMMMk`MMMMMMMP",
		  " H\"MMMMMMMMhx???\",nHMMP\",nh MMMMMM?MP\"xHMMMMMMMMMF-?TMMMM\"",
		  "   MMPTMMMMMMMMMMP\"u- :n.`\"%'MF.xnF.nMMMMMMMMMP\".::::.\"Te",
		  "  'M\".MPTMMMMMP\"zeEeP.MMMMM\"..4MF,HMMMMMMMMMF'.::::::::`R.",
		  "   \" MF dMMMf z$$$$$ MMMF'xMMMr`HMMMMMMMMM\".:::::::.::...?_",
		  "     T  M P  $$$$$$%dMF'dMMMM\"xk'MPJMMMMP ::'.'';i!!!!'`^.xhMmx",
		  "       'M   4$$$$$P.P,HMMMMM,HMMh TMMMMM> :!!!!!!!'`.xnMMMMMMMMMn",
		  "            J$$$$$ \",MMMMMM,MMMM'h TMMMML'!;!!!`.nHMMMMMMMMMMMMMMMn",
		  "            $$$$$P HMMMMMM,MMMM MMM.\"MMMM \\!i`.HMMMMMMMMMMMMMMMMMMMMr",
		  "            $$$$$\"dMMMMMMMMMMMfdMMMM.`MMMh   xMMMMMMMMMMMMMMMMMMMMMMM",
		  "           4$$$$$ MMMMMMMMMMMMMMMMMMMx`MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM'",
		  "          ,4$$$$$.MMMMMMMMMMMMMMMMMMMMh TMMMMMMMMMMMMMMMMMMMMMMMMMMMf",
		  "         ; J$$$$F;MMMMMMMMMMMMMMMMMMMMMM.\"MMMMMMMMMMMMMMMMMMMMMMP\"\"",
		  "       .db $$$$$ MMMMMMMMMMMMMMMMMMMMMMMMh.\"MMMMMMMMMMMMMMPF\"",
		  "      , d$b$$$$$ MMMMMMMMMMMMMMMMMMMMMMMMMM u\"?f\"\"?=",
		  "     .  $$$$$$$$ MMMMMMMMMMMMMMMMMMMMMMMMMfJ$b",
		  "    z$  d$$$$$$$ MMMMMMMMMMMMMMMMMMMMMMMMM P\" `",
		  "   e$$h ?$$$$$$$ MMMMMMMMMMMMMMMMMMMMMMMMf^  zF`.",
		  "*/",
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "typedef long long int ll;",
		  "typedef unsigned long long ull;",
		  "typedef long double ld;",
		  "",
		  "const ll mod = 1e9 + 7;",
		  "#define endl \"\\n\"",
		  "#define eps 1e-7",
		  "#define PI 3.1415926535897932384626",
		  "#define inf 0x3f3f3f3f3f3f3f3f",
		  "#define all(x) x.begin(), x.end()",
		  "#define rall(x) x.rbegin(), x.rend()",
		  "#define sortall(x) sort(all(x))",
		  "#define vpi vector<pi>",
		  "#define vi vector<ll>",
		  "#define pi pair<ll, ll>",
		  "#define mk make_pair",
		  "#define pb push_back",
		  "#define ppb pop_back",
		  "#define ff first",
		  "#define ss second",
		  "#define umap unordered_map",
		  "#define uset unordered_set",
		  "#define set_bits __builtin_popcountll",
		  "#define vvi vector<vector<ll>>",
		  "#define minheap priority_queue<ll, vi, greater<ll>>",
		  "#define maxheap priority_queue<ll>",
		  "#define minheapi priority_queue<pi, vpi, greater<pi>>",
		  "#define maxheapi priority_queue<pi>",
		  "#define sz(x) ((long long)(x).size())",
		  "#define IOS                       \\",
		  "    ios_base::sync_with_stdio(0); \\",
		  "    cin.tie(0);",
		  "#define fo(i, n) for (i = 0; i < n; i++)",
		  "#define fox(i, a, b) for (i = a; i < b; i++)",
		  "#define deb1(x) cout << #x << \" = \" << x << endl;",
		  "#define deb2(x, y) cout << #x << \" = \" << x << \", \" << #y << \" = \" << y << endl",
		  "#define deblp(a)          \\",
		  "    for (auto j : a)      \\",
		  "    {                     \\",
		  "        cout << j << \" \"; \\",
		  "    }                     \\",
		  "    cout << endl;",
		  "#define clr(x, a) memset(x, a, sizeof(x))",
		  "#define fills(a, val) fill_n(a, sizeof(a) / sizeof(a[0]), val)",
		  "#define sq(x) ((x) * (x))",
		  "",
		  "ll powmod(ll x, ll y)",
		  "{",
		  "    ll t;",
		  "    for (t = 1; y; y >>= 1, x = x * x % mod)",
		  "        if (y & 1)",
		  "            t = t * x % mod;",
		  "    return t;",
		  "}",
		  "ll gcd(ll x, ll y) { return y ? gcd(y, x % y) : x; }",
		  "ll lcm(ll x, ll y) { return x * (y / gcd(x, y)); }",
		  "ll modd(ll a) { return (a % mod + mod) % mod; }",
		  "double findMod(double a, double b)",
		  "{",
		  "    double mods;",
		  "    if (a < 0)",
		  "        mods = -a;",
		  "    else",
		  "        mods = a;",
		  "    if (b < 0)",
		  "        b = -b;",
		  "    while (mods >= b)",
		  "        mods = mods - b;",
		  "    if (a < 0)",
		  "        return -mods;",
		  "    return mods;",
		  "}",
		  "// find primes smaller than n",
		  "vector<ll> sieve(int n)",
		  "{",
		  "    int *arr = new int[n + 1]();",
		  "    vector<ll> vect;",
		  "    for (ll i = 2; i <= n; i++)",
		  "        if (arr[i] == 0)",
		  "        {",
		  "            vect.push_back(i);",
		  "            for (ll j = 2 * i; j <= n; j += i)",
		  "                arr[j] = 1;",
		  "        }",
		  "    return vect;",
		  "}",
		  "ll add(ll a, ll b) { return modd(modd(a) + modd(b)); }",
		  "ll mul(ll a, ll b) { return modd(modd(a) * modd(b)); }",
		  "int smask(int i, int pos) { return (i | (1 << pos)); }",
		  "int clmask(int i, int pos) { return (i & (~(1 << pos))); }",
		  "bool chmask(int i, int pos) { return (i & (1 << pos)) != 0; }",
		  "double cordist(pair<double, double> a, pair<double, double> b)",
		  "{",
		  "    return sqrt(sq(a.first - b.first) + sq(a.second - b.second));",
		  "}",
		  "",
		  "long long binpow(long long a, long long b)",
		  "{",
		  "    if (b <= 0)",
		  "        return 1;",
		  "    long long res = binpow(a, b / 2);",
		  "    if (b % 2)",
		  "        return mul(mul(res, res), a);",
		  "    else",
		  "        return mul(res, res);",
		  "}",
		  "",
		  "ll divs(ll a, ll b) { return a * binpow(b, mod - 2); }",
		  "",
		  "ll n, m, q, r, i, j;",
		  "",
		  "int convert2dto1d(int x, int y)",
		  "{",
		  "    return (m * (x - 1)) + y;",
		  "}",
		  "",
		  "class unionFind",
		  "{",
		  "private:",
		  "    vi p, rank, setSize;",
		  "    int numSets;",
		  "",
		  "public:",
		  "    unionFind(int N)",
		  "    {",
		  "        setSize.assign(N, 1);",
		  "        numSets = N;",
		  "        rank.assign(N, 0);",
		  "        p.assign(N, 0);",
		  "        for (int i = 0; i < N; i++)",
		  "            p[i] = i;",
		  "    }",
		  "    int find(int i) { return (p[i] == i) ? i : (p[i] = find(p[i])); }",
		  "    bool issame(int i, int j) { return find(i) == find(j); }",
		  "    void unionds(int i, int j)",
		  "    {",
		  "        if (!issame(i, j))",
		  "        {",
		  "            numSets--;",
		  "            int x = find(i), y = find(j);",
		  "            if (rank[x] > rank[y])",
		  "            {",
		  "                p[y] = x;",
		  "                setSize[x] += setSize[y];",
		  "            }",
		  "            else",
		  "            {",
		  "                p[x] = y;",
		  "                setSize[y] += setSize[x];",
		  "                if (rank[x] == rank[y])",
		  "                    rank[y]++;",
		  "            }",
		  "        }",
		  "    }",
		  "    int numDisjointSets() { return numSets; }",
		  "    int sizeOfSet(int i) { return setSize[find(i)]; }",
		  "};",
		  "",
		  "void solve()",
		  "{",
		  "}",
		  "",
		  "signed main()",
		  "{",
		  "    // freopen(\"input.in\",\"r\",stdin); freopen(\"output.in\",\"w\",stdout);",
		  "    IOS int k = 1;",
		  "    // init();",
		  "    cin >> k;",
		  "    // sieve();",
		  "    // int counter=1;",
		  "    while (k--)",
		  "    {",
		  "        // printf(\"Case #%d: \",counter++);",
		  "        solve();",
		  "    }",
		  "    return 0;",
		  "}"
		],
		"description": ""
	  }
}